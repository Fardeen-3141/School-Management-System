// prisma\schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id          String   @id @default(cuid())
  email       String   @unique
  role        Role
  code        String   @unique
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  invitedBy   String
  invitedUser User     @relation(fields: [invitedBy], references: [id])

  // For student-specific invitations
  studentData Json? // Store class, section, guardian info

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(STUDENT)
  hashedPassword String?

  status UserStatus @default(PENDING)

  employeeId String? @unique // For staff/admin
  studentId  String? @unique // For students

  accounts        Account[]
  sessions        Session[]
  student         Student?
  sentInvitations Invitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id            String    @id @default(cuid())
  name          String
  class         String
  section       String
  rollNumber    String    @unique
  guardian      String
  guardianPhone String
  guardianEmail String?
  address       String?
  dateOfBirth   DateTime?
  admissionDate DateTime?

  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fees       Fee[]
  payments   Payment[]
  attendance Attendance[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  StudentFeeSetup StudentFeeSetup[]
}

model FeeStructure {
  id         String     @id @default(cuid())
  type       String     @unique // e.g., "Tuition Fee", "Admission Fee"
  amount     Decimal
  recurrence Recurrence @default(ONCE)
  isDefault  Boolean    @default(false) // Apply to all new students?

  studentSetups StudentFeeSetup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentFeeSetup {
  id             String       @id @default(cuid())
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feeStructureId String
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  customAmount     Decimal? // To override the default amount from FeeStructure
  isActive         Boolean   @default(true)
  lastGeneratedFor DateTime? // Tracks the period for which a fee was last generated

  generatedFees Fee[] // Link to the generated fees

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, feeStructureId])
}

model Fee {
  id        String    @id @default(cuid())
  type      String
  amount    Decimal
  dueDate   DateTime
  studentId String
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payments  Payment[]

  studentFeeSetupId String?
  studentFeeSetup   StudentFeeSetup? @relation(fields: [studentFeeSetupId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String        @id @default(cuid())
  amount    Decimal
  method    PaymentMethod
  date      DateTime      @default(now())
  status    PaymentStatus @default(PENDING)
  studentId String
  feeId     String?
  student   Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  fee       Fee?           @relation(fields: [feeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime
  status    AttendanceStatus
  studentId String
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([date, studentId])
}

// --- ENUMS ---
enum Recurrence {
  ONCE
  MONTHLY
  YEARLY
}

enum Role {
  ADMIN
  STUDENT
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  UPI
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
